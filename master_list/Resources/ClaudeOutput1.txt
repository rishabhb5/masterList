//
//  ClaudeOutput1.swift
//  master_list
//
//  Created by rishabh b on 6/6/25.
//

# SwiftData Todo App - Complete Implementation

## Project Structure
```
TodoApp/
├── TodoApp.swift              // App entry point
├── MainTabView.swift          // Tab container
├── Models/
│   ├── TodoItem.swift         // Data model with category and sort order
│   └── TodoCategory.swift     // Category enum
└── Views/
    ├── AllTodosView.swift     // All todos with drag-to-reorder
    ├── CompletedTodosView.swift // Completed todos only
    ├── TodoRowView.swift      // Reusable todo row
    ├── AddTodoView.swift      // Add todo modal
    └── CategoryPicker.swift   // Category selection component
```

---

## App Entry Point

### TodoApp.swift
```swift
import SwiftUI
import SwiftData

@main
struct TodoApp: App {
    var body: some Scene {
        WindowGroup {
            MainTabView()
        }
        .modelContainer(for: TodoItem.self)
    }
}
```

### MainTabView.swift
```swift
import SwiftUI

struct MainTabView: View {
    var body: some View {
        TabView {
            AllTodosView()
                .tabItem {
                    Image(systemName: "list.bullet")
                    Text("All")
                }
            
            CompletedTodosView()
                .tabItem {
                    Image(systemName: "checkmark.circle")
                    Text("Completed")
                }
        }
    }
}

#Preview {
    MainTabView()
        .modelContainer(for: TodoItem.self, inMemory: true)
}
```

---

## Models

### Models/TodoCategory.swift
```swift
import SwiftUI

enum TodoCategory: String, CaseIterable, Codable {
    case work = "Work"
    case personal = "Personal"
    case shopping = "Shopping"
    case health = "Health"
    case learning = "Learning"
    case household = "Household"
    case finance = "Finance"
    case travel = "Travel"
    
    var color: Color {
        switch self {
        case .work:
            return .blue
        case .personal:
            return .green
        case .shopping:
            return .orange
        case .health:
            return .red
        case .learning:
            return .purple
        case .household:
            return .brown
        case .finance:
            return .indigo
        case .travel:
            return .pink
        }
    }
    
    var icon: String {
        switch self {
        case .work:
            return "briefcase.fill"
        case .personal:
            return "person.fill"
        case .shopping:
            return "cart.fill"
        case .health:
            return "heart.fill"
        case .learning:
            return "book.fill"
        case .household:
            return "house.fill"
        case .finance:
            return "dollarsign.circle.fill"
        case .travel:
            return "airplane"
        }
    }
}
```

### Models/TodoItem.swift
```swift
import SwiftData
import Foundation

@Model
class TodoItem {
    var title: String
    var isCompleted: Bool
    var createdAt: Date
    var categoryRawValue: String
    var sortOrder: Int
    
    // Computed property for easy category access
    var category: TodoCategory {
        get {
            TodoCategory(rawValue: categoryRawValue) ?? .personal
        }
        set {
            categoryRawValue = newValue.rawValue
        }
    }
    
    init(title: String, category: TodoCategory = .personal, isCompleted: Bool = false) {
        self.title = title
        self.categoryRawValue = category.rawValue
        self.isCompleted = isCompleted
        self.createdAt = Date()
        // Set initial sort order based on creation time
        self.sortOrder = Int(Date().timeIntervalSince1970)
    }
}
```

---

## Views

### Views/AllTodosView.swift
```swift
import SwiftUI
import SwiftData

struct AllTodosView: View {
    @Environment(\.modelContext) private var context
    @Query(sort: [
        SortDescriptor(\TodoItem.sortOrder),
        SortDescriptor(\TodoItem.createdAt, order: .reverse)
    ]) private var todoItems: [TodoItem]
    @State private var showingAddSheet = false
    
    var body: some View {
        NavigationView {
            List {
                ForEach(todoItems) { item in
                    TodoRowView(item: item)
                }
                .onDelete(perform: deleteItems)
                .onMove(perform: moveItems)
            }
            .navigationTitle("All Todos")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showingAddSheet = true }) {
                        Image(systemName: "plus")
                    }
                }
            }
            .sheet(isPresented: $showingAddSheet) {
                AddTodoView()
            }
        }
    }
    
    private func deleteItems(offsets: IndexSet) {
        withAnimation {
            for index in offsets {
                context.delete(todoItems[index])
            }
            try? context.save()
        }
    }
    
    private func moveItems(from source: IndexSet, to destination: Int) {
        var updatedItems = Array(todoItems)
        updatedItems.move(fromOffsets: source, toOffset: destination)
        
        // Update sort order for all items
        for (index, item) in updatedItems.enumerated() {
            item.sortOrder = index
        }
        
        // Save changes
        do {
            try context.save()
        } catch {
            print("Failed to save reordered items: \(error)")
        }
    }
}

#Preview {
    AllTodosView()
        .modelContainer(for: TodoItem.self, inMemory: true)
}
```

### Views/CompletedTodosView.swift
```swift
import SwiftUI
import SwiftData

struct CompletedTodosView: View {
    @Environment(\.modelContext) private var context
    @Query(
        filter: #Predicate<TodoItem> { $0.isCompleted == true },
        sort: \TodoItem.createdAt,
        order: .reverse
    ) private var completedItems: [TodoItem]
    
    var body: some View {
        NavigationView {
            List {
                if completedItems.isEmpty {
                    ContentUnavailableView(
                        "No Completed Todos",
                        systemImage: "checkmark.circle",
                        description: Text("Complete some todos to see them here")
                    )
                } else {
                    ForEach(completedItems) { item in
                        TodoRowView(item: item, showDragHandle: false)
                    }
                    .onDelete(perform: deleteItems)
                }
            }
            .navigationTitle("Completed")
            .toolbar {
                if !completedItems.isEmpty {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button("Clear All") {
                            clearAllCompleted()
                        }
                        .foregroundColor(.red)
                    }
                }
            }
        }
    }
    
    private func deleteItems(offsets: IndexSet) {
        withAnimation {
            for index in offsets {
                context.delete(completedItems[index])
            }
            try? context.save()
        }
    }
    
    private func clearAllCompleted() {
        withAnimation {
            for item in completedItems {
                context.delete(item)
            }
            try? context.save()
        }
    }
}

#Preview {
    CompletedTodosView()
        .modelContainer(for: TodoItem.self, inMemory: true)
}
```

### Views/TodoRowView.swift
```swift
import SwiftUI
import SwiftData

struct TodoRowView: View {
    @Environment(\.modelContext) private var context
    let item: TodoItem
    let showDragHandle: Bool
    
    init(item: TodoItem, showDragHandle: Bool = true) {
        self.item = item
        self.showDragHandle = showDragHandle
    }
    
    var body: some View {
        HStack(spacing: 12) {
            // Conditionally show drag handle
            if showDragHandle {
                Image(systemName: "line.3.horizontal")
                    .foregroundColor(.gray)
                    .font(.system(size: 16))
                    .frame(width: 20)
            }
            
            Button(action: toggleCompletion) {
                Image(systemName: item.isCompleted ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(item.isCompleted ? .green : .gray)
                    .font(.system(size: 20))
            }
            .buttonStyle(PlainButtonStyle())
            
            VStack(alignment: .leading, spacing: 4) {
                Text(item.title)
                    .strikethrough(item.isCompleted)
                    .foregroundColor(item.isCompleted ? .gray : .primary)
                    .font(.system(size: 16, weight: .medium))
                
                HStack(spacing: 4) {
                    Image(systemName: item.category.icon)
                        .font(.system(size: 12))
                        .foregroundColor(item.category.color)
                    
                    Text(item.category.rawValue)
                        .font(.system(size: 12, weight: .medium))
                        .foregroundColor(item.category.color)
                }
            }
            
            Spacer()
        }
        .padding(.vertical, 4)
        .contentShape(Rectangle())
        .onTapGesture {
            toggleCompletion()
        }
    }
    
    private func toggleCompletion() {
        withAnimation {
            item.isCompleted.toggle()
            try? context.save()
        }
    }
}

#Preview {
    let config = ModelConfiguration(isStoredInMemoryOnly: true)
    let container = try! ModelContainer(for: TodoItem.self, configurations: config)
    let context = container.mainContext
    
    let sampleItem = TodoItem(title: "Sample Work Todo", category: .work)
    context.insert(sampleItem)
    
    return VStack {
        TodoRowView(item: sampleItem, showDragHandle: true)
        TodoRowView(item: sampleItem, showDragHandle: false)
    }
    .modelContainer(container)
    .padding()
}
```

### Views/AddTodoView.swift
```swift
import SwiftUI
import SwiftData

struct AddTodoView: View {
    @Environment(\.modelContext) private var context
    @Environment(\.dismiss) private var dismiss
    @State private var todoTitle = ""
    @State private var selectedCategory: TodoCategory = .personal
    @Query private var existingItems: [TodoItem]
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Todo Item")
                            .font(.headline)
                            .foregroundColor(.primary)
                        
                        TextField("Enter todo item", text: $todoTitle)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .onSubmit {
                                if canSave {
                                    saveTodo()
                                }
                            }
                    }
                    
                    CategoryPicker(selectedCategory: $selectedCategory)
                    
                    Spacer()
                }
                .padding()
            }
            .navigationTitle("Add Todo")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveTodo()
                    }
                    .disabled(!canSave)
                }
            }
        }
    }
    
    private var canSave: Bool {
        !todoTitle.trimmingCharacters(in: .whitespaces).isEmpty
    }
    
    private func saveTodo() {
        let newItem = TodoItem(
            title: todoTitle.trimmingCharacters(in: .whitespaces),
            category: selectedCategory
        )
        
        // Set sort order to appear at top
        let maxSortOrder = existingItems.map { $0.sortOrder }.max() ?? 0
        newItem.sortOrder = maxSortOrder + 1
        
        context.insert(newItem)
        
        do {
            try context.save()
            dismiss()
        } catch {
            print("Failed to save todo: \(error)")
        }
    }
}

#Preview {
    AddTodoView()
        .modelContainer(for: TodoItem.self, inMemory: true)
}
```

### Views/CategoryPicker.swift
```swift
import SwiftUI

struct CategoryPicker: View {
    @Binding var selectedCategory: TodoCategory
    let showLabel: Bool
    
    init(selectedCategory: Binding<TodoCategory>, showLabel: Bool = true) {
        self._selectedCategory = selectedCategory
        self.showLabel = showLabel
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            if showLabel {
                Text("Category")
                    .font(.headline)
                    .foregroundColor(.primary)
            }
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 12) {
                ForEach(TodoCategory.allCases, id: \.self) { category in
                    CategoryOptionView(
                        category: category,
                        isSelected: selectedCategory == category
                    ) {
                        withAnimation(.easeInOut(duration: 0.2)) {
                            selectedCategory = category
                        }
                    }
                }
            }
        }
    }
}

struct CategoryOptionView: View {
    let category: TodoCategory
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 8) {
                Image(systemName: category.icon)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(isSelected ? .white : category.color)
                
                Text(category.rawValue)
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(isSelected ? .white : .primary)
                
                Spacer()
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 8)
            .background(
                RoundedRectangle(cornerRadius: 8)
                    .fill(isSelected ? category.color : Color(.systemGray6))
            )
            .overlay(
                RoundedRectangle(cornerRadius: 8)
                    .stroke(category.color, lineWidth: isSelected ? 0 : 1)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

#Preview {
    @State var selectedCategory = TodoCategory.work
    return CategoryPicker(selectedCategory: $selectedCategory)
        .padding()
}
```

---

## Key Features

### 🎯 **Architecture Benefits**
- **Clean separation**: Models, Views, and App entry point are clearly separated
- **SwiftData integration**: Modern Core Data replacement with `@Model` and `@Query`
- **Reusable components**: `TodoRowView` and `CategoryPicker` can be used across views
- **Type safety**: Strong typing with enums and computed properties

### 🔧 **Functionality**
- **Drag-to-reorder**: Items can be reordered in the All Todos view
- **Category system**: 8 predefined categories with colors and icons
- **Completion tracking**: Toggle between completed/incomplete states
- **Data persistence**: SwiftData handles Core Data complexity automatically
- **Clean UI**: Modern SwiftUI patterns with proper state management

### 🚀 **Extensibility**
- Easy to add new categories or properties
- Modular view structure allows for easy feature additions
- Preview-friendly code for development and testing
